from pass_adm import Check
from lang import CheckLang
from impr_bd import BD
import telebot
from telebot import apihelper, types
import logging

# logging info
logging.basicConfig(#format=u'%(filename)s[LINE:%(lineno)d]#%(levelname)-8s[%(asctime)s] %(message)s',
                    level=logging.DEBUG, filename='info.log')
apihelper.proxy = {'https': 'socks5h://localhost:9050'}  # proxy
Token = '1105649584:AAH2ljq-IhIHqGpQLAtdxEoxpyo8JuO3224'
bot = telebot.TeleBot(Token)  # Connect to Telegram
ch, lang, bd = Check(), CheckLang(), BD()
#      Admin_check / Convert text of lang. / DataBase about questing
adm_log = dict()
# id admins queue of busy`s questing
users, peop = dict(), set()
# {id: 'en/ru'} | busy users w/questions
print('life')
logging.info('start')


# end work admin
@bot.message_handler(commands=['exit'])
def _ex(message):
    if ch.adm(message.from_user.id):
        ch.exit(message.from_user.id)
        bot.send_message(message.from_user.id, '–£—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')


# get all questions
@bot.message_handler(commands=['getall'])
def _fres(message):
    if ch.adm(message.from_user.id):
        markup = types.ReplyKeyboardMarkup(True, True, row_width=1)
        b = bd.get_all()
        for i in b:
            markup.add(types.KeyboardButton(i))
        bot.send_message(message.from_user.id, f'–°–≤–æ–±–æ–¥–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ {len(b) - 1}', reply_markup=markup)


# choose language
@bot.message_handler(commands=['start'])
def send_start(message):
    markup = types.ReplyKeyboardMarkup(True, True, row_width=2)
    item1 = types.KeyboardButton('ru üá∑üá∫')
    item = types.KeyboardButton('en üá¨üáß')
    markup.add(item1, item)
    bot.send_message(message.from_user.id, 'Choose your language, please\n'
                                           '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', reply_markup=markup)


def faq(mes):
    pass


# help words
@bot.message_handler(commands=['help', 'command'])
def send_help(message):
    if message.from_user.id in users:
        markup = types.ReplyKeyboardMarkup(True, row_width=2)
        item1 = types.KeyboardButton(lang.checker('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', users[message.from_user.id]))
        item = types.KeyboardButton('FAQ')
        markup.add(item1, item)
        bot.send_message(message.from_user.id, lang.checker(
            '–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö, –ø—Ä–µ–∂–¥–µ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ FAQ, –¥–∞–ª—å—à–µ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å'
            ' –∞–≥–µ–Ω—Ç–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –õ–æ–≤–∏—Ç–µ –∫–Ω–æ–ø–∫–∏.', users[message.from_user.id]),
                         reply_markup=markup)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    # check availability in admin list in queue answer of quests
    if message.from_user.id in adm_log:
        anon = users[int(adm_log[message.from_user.id])]
        text = lang.checker('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', anon) + f'({str(message.from_user.id)[-3:]})' + ' ' + \
               lang.checker('–æ—Ç–≤–µ—Ç–∏–ª –≤–∞–º –Ω–∞ –≤–æ–ø—Ä–æ—Å', anon) + '\n' + \
               message.text + '\n' + lang.checker('–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–∞–º.', anon)
        bot.send_message(adm_log[message.from_user.id], text)
        bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω')
        bd.delete(int(adm_log[message.from_user.id]))
        adm_log.pop(message.from_user.id)
    # check availability in main list 'users'
    elif message.from_user.id in users or (message.text == 'ru üá∑üá∫' or message.text == 'en üá¨üáß'):
        # Choose language
        if message.text == 'ru üá∑üá∫' or message.text == 'en üá¨üáß':
            users[message.from_user.id] = 'ru' if message.text == 'ru üá∑üá∫' else 'en'
            bot.send_message(message.from_user.id, lang.checker(
                '–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω - —Ä—É—Å—Å–∫–∏–π. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /help',
                users[message.from_user.id]))
            send_help(message)
        # Answer admin of quest
        elif str(message.text).startswith('<#>') and ch.adm(message.from_user.id):
            now_text = str(message.text).split(':')[0][3:]
            bot.send_message(message.from_user.id, f'{now_text}\n{bd.get(int(now_text))}')
            adm_log[message.from_user.id] = now_text
        # Message processing
        elif message.text == '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å' or message.text == 'Ask a Quesion':
            bot.reply_to(message, lang.checker(
                '–ó–∞–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É.', users[message.from_user.id]))
            peop.add(message.from_user.id)
        elif str(message.text).startswith('pas '):
            if ch.adm(message.from_user.id):
                bot.reply_to(message, '–í—ã –∏ —Ç–∞–∫ –∑–∞—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.')
            else:
                if ch.adm_add(str(message.text).split()[1], message.from_user.id) and len(message.text) > 4:
                    bot.send_sticker(message.from_user.id,
                                     'CAACAgIAAxkBAAI52l5_FPbznPr3FTU6LEFd3ztE3o98AALzAgACnNbnCuAuBHGFD8ECGAQ')
                else:
                    bot.send_sticker(message.from_user.id,
                                     'CAACAgIAAxkBAAI53F5_FP3GtYhh15hR_HcMR-_m8vz5AAIlAwACnNbnCgAB0udXwyXKPxgE')
        elif str(message.text).startswith('FAQ'):
            pass
        else:
            if message.from_user.id in peop:
                if message.text == '.':
                    bot.reply_to(message, lang.checker(
                        '–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: —É—Å–ø–µ—à–Ω–æ.', users[message.from_user.id]))
                else:
                    bd.add(message.from_user.id, message.from_user.first_name + ' : ' + message.text)
                    bot.reply_to(message, lang.checker('–í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ü–∏–∏. '
                                                       '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–Ω–∏ –ø—Ä–∏—à–ª—é—Ç –æ—Ç–≤–µ—Ç',
                                                       users[message.from_user.id]))
                    for i in list(ch.get_list()):
                        bot.send_message(i, '‚ùó –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚ùó\n--> /getall')
                peop.discard(message.from_user.id)
            else:
                bot.send_message(message.from_user.id, 'Write please | –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ \n/help')
    else:
        bot.send_message(message.from_user.id, 'Write please | –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ \n/start')


bot.polling(none_stop=True, interval=0, timeout=120)


